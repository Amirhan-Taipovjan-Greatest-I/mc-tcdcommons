/**
 * A failed attempt at implementing a decent event manager.
 * (because Java does what Java does best, being annoying and unpredictable)
 */
package thecsdev.tcdcommons.api.util.events;

import java.lang.ref.WeakReference;
import java.util.ArrayList;
import java.util.Objects;
import java.util.function.Consumer;

import com.google.common.collect.Lists;

import thecsdev.tcdcommons.api.util.SubjectToChange;

/**
 * A {@link TEvent} is an object that holds event handlers
 * that handle that given event.
 */
public class TEvent<E>
{
	// ==================================================
	protected final @SubjectToChange TEventAccessor __accessor;
	protected @SubjectToChange boolean __claimed = false;
	
	/**
	 * The event handlers are held in weak references
	 * so as to avoid memory leaks. In other words, it
	 * makes up for any reckless {@link Object}s that might forget
	 * to unregister their handlers once they are done with them.
	 */
	protected final ArrayList<WeakReference<E>> eventHandlers = Lists.newArrayList();
	// ==================================================
	/**
	 * Creates a {@link TEvent} instance.<br/>
	 * Don't forget to {@link #claimAccess()} after this.
	 */
	public TEvent() { this.__accessor = new TEventAccessor(); }
	
	/**
	 * Returns the {@link TEventAccessor} for this {@link TEvent}.<br/>
	 * <b>Can only be called once, so be careful.</b>
	 * @throws IllegalCallerException When already claimed.
	 */
	public TEventAccessor claimAccess()
	{
		if(this.__claimed)
			throw new IllegalCallerException("Already claimed.");
		this.__claimed = true;
		return this.__accessor;
	}
	// ==================================================
	/**
	 * Unregisters all event handlers that are no longer in use.
	 */
	public final void garbageDump() { this.eventHandlers.removeIf(i -> i.get() == null); }
	// --------------------------------------------------
	/**
	 * Adds an event handler to this {@link TEvent}'s list of event handlers.<br/>
	 * <br/>
	 * <b>Important:</b> To avoid memory leaks, event handlers are stored in
	 * {@link WeakReference}s. This means that if you lose all references to
	 * the event handler, or if it goes out of scope, it will be automatically removed.
	 * @param handler The event handler that will be used to handle this event.
	 * @return The added event handler.
	 * @exception NullPointerException When the argument is null.
	 */
	public E addWeakEventHandler(E handler)
	{
		Objects.requireNonNull(handler, "handler must not be null.");
		this.eventHandlers.add(new WeakReference<E>(handler));
		return handler;
	}
	
	/**
	 * Removes an event handler from this {@link TEvent}'s list of event handlers.
	 * @param handler The event handler to remove.
	 * @return True if the event handler was present and was then removed.
	 * @exception NullPointerException When the argument is null.
	 */
	public boolean removeEventHandler(E handler)
	{
		Objects.requireNonNull(handler, "handler must not be null.");
		garbageDump();
		return this.eventHandlers.removeIf(i -> i.get() == handler);
	}
	// ==================================================
	/**
	 * A {@link TEvent} accessor is a special object that allows
	 * you to invoke the {@link TEvent}'s event handlers.
	 */
	public final class TEventAccessor
	{
		// ----------------------------------------------
		protected TEventAccessor() {}
		
		/**
		 * Returns the {@link TEvent} this {@link TEventAccessor} is tied to.
		 */
		public final TEvent<E> getTEvent() { return TEvent.this; }
		// ----------------------------------------------
		/**
		 * Invokes all event handlers that belong to this {@link TEvent}.
		 * @param handlerInvoker The lambda expression used to invoke an event handler.
		 * @exception NullPointerException When the argument is null.
		 */
		public void invoke(Consumer<E> handlerInvoker)
		{
			//invoke all event handlers
			Objects.requireNonNull(handlerInvoker, "handlerInvoker must not be null.");
			garbageDump();
			for(WeakReference<E> handlerRef : eventHandlers)
			{
				E handler = handlerRef.get();
				if(handler == null) continue; //in case it does happen
				handlerInvoker.accept(handler);
			}
		}
		
		/**
		 * Removes all event handlers from the given {@link TEvent}.
		 */
		public void clearEventHandlers() { eventHandlers.clear(); }
		// ----------------------------------------------
	}
	// ==================================================
}
